name: pkgx/brewkit/build

inputs:
  pkg:
    description: >
      eg. pkgx.sh@1.1
    required: true
  token:
    default: ${{github.token}}
    required: true
  raw-version:
    description: |
      some pkgs require the “raw version” to process, eg. the semantic version
      is 1.2.0 but the raw version is 1.2. the raw version will be used in eg.
      tarballs.

      the reason to specify this is otherwise almost all brewkit operations
      must ping GitHub for version info as there is no other way to get the
      “raw” version. Pinging GitHub so often is wasteful, but the real reason
      we added this is because GitHub is unreliable AF nowadays and we got
      fed up with builds failing because of it.
    required: false

outputs:
  pkgspec:
    description: >
      the precise pkg and version we built, eg. pkgx.sh@1.1.1
    value: ${{ steps.build.outputs.pkgspec }}
  prefix:
    description: >
      the path to the built and installed pkg
    value: ${{ steps.build.outputs.prefix }}
  noop:
    description: >
      the build is a noop if it cannot be built and run on this platform
    value: ${{ steps.build.outputs.noop }}
  project:
    value: ${{ steps.build.outputs.project }}
  version:
    value: ${{ steps.build.outputs.version }}
  platform:
    value: ${{ steps.build.outputs.platform }}
  arch:
    value: ${{ steps.build.outputs.arch }}

runs:
  using: composite
  steps:
    - name: prep
      run: |
        if ! pkgx --sync; then
          echo "::error::you must use: pkgxdev/setup before using this action"
          exit 1
        fi
      shell: bash

    - name: fetch deno deps
      shell: bash
      run: |
        echo "::group::fetch deno deps"
        tmpdir=$(mktemp -d)
        ln -s ${GITHUB_ACTION_PATH}/../bin/cmd/build $tmpdir/build.ts
        pkgx deno cache $tmpdir/build.ts --config=${GITHUB_ACTION_PATH}/../deno.jsonc
        echo "::endgroup::"

    - name: build
      run: |
        if [ -d projects -a -z "$PKGX_PANTRY_PATH" ]; then
          export PKGX_PANTRY_PATH="$PWD/projects"
        fi

        set +e
        ${GITHUB_ACTION_PATH}/../bin/cmd/build ${{ inputs.pkg }}
        status=$?
        if [ $status -eq 2 ]; then
          echo noop=true >> $GITHUB_OUTPUT
        else
          exit $status
        fi
      id: build
      env:
        GITHUB_TOKEN: ${{inputs.token}}
      shell: bash
