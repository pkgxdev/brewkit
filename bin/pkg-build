#!/usr/bin/env -S tea bash
# shellcheck shell=bash

set -e

if pwd | grep -q ' '; then
  echo "tea.xyz/brewkit: warning: current directory contains spaces. builds *will* break!" >&2
fi

if test -n "$RUNNER_DEBUG" -a -n "$GITHUB_ACTIONS" -o -n "$VERBOSE"; then
  set -x
fi

d="$(cd "$(dirname "$0")"/.. && pwd)"
PATH="$d/libexec:$PATH"

if test -z "$1"; then
  if test -z "$TEA_PANTRY_PATH"; then
    echo "error: TEA_PANTRY_PATH is not set" >&2
    exit 1
  fi
  for x in $(echo "$TEA_PANTRY_PATH" | tr ':' '\n'); do
    if test -d "$x"/.git; then
      PKGS="$(GIT_WORK_TREE="$x" peek.sh) $PKGS"
    fi
  done
else
  PKGS="$*"
fi

if test -n "$TEA_DOCKER"; then
  exec "$d"/bin/pkg-docker build "$PKGS"
fi

if ! available.ts "$@"; then
  echo "warning: not supported on current platform" >&2
  exit 0
fi

if test -z "$GITHUB_TOKEN"; then
  GITHUB_TOKEN=$(tea gh auth token)
  if test -z "$GITHUB_TOKEN"; then
    echo "error: builds need a GITHUB_TOKEN. Either export that or run \`gh auth login\`" >&2
    exit 1
  fi
  export GITHUB_TOKEN
fi

# shellcheck disable=SC2086
PKGS="$(sort.ts $PKGS --delimiter ' ')"
# ^^ ensures that pkgs build topologically

gum() {
  tea gum format -- "$@"
}

for PKG in $PKGS; do
  gum "# building $PKG"

  PKG="$(resolve.ts "$PKG")"
  ZIP="$(query.ts "$PKG" --src)"
  PREFIX="$(query.ts "$PKG" --prefix)"
  SRCDIR="$(query.ts "$PKG" --srcdir)"
  BLDDIR="$(query.ts "$PKG" --build-dir)"

  if test -n "$ZIP"; then
    gum "# fetching $ZIP"
    fetch.ts "$PKG" -o "$ZIP"
  fi

  if test -f "$ZIP"; then
    gum "# extracting $SRCDIR"
    extract.ts "$ZIP" --pkg "$PKG" --output-dir "$SRCDIR"
  else
    mkdir -p "$SRCDIR"
  fi

  gum "# staging for build"

  DEPS=$(deps.ts "$PKG" --build)  # eg. nodejs.org^4

  # shellcheck disable=SC2086
  DEPS=$(install.ts $DEPS)      # eg. ~/.tea/nodejs.org/v4.3.2

  mkdir -p "$SRCDIR"
  BUILD_SCRIPT="$(stage.ts "$PKG" --srcdir "$SRCDIR" --prefix "$PREFIX" --deps "$DEPS" --build-dir "$BLDDIR")"

  if command -v bash >/dev/null; then
    BASH=bash
  else
    BASH="tea bash"
  fi

  gum "# running build"

  env -i GITHUB_TOKEN="$GITHUB_TOKEN" "$BASH" --noprofile --norc -e "$BUILD_SCRIPT"

  if ! test -d "$PREFIX"; then
    echo "error: nothing installed to \`$PREFIX\`" >&2
    echo "maybe: did you forget to \`make install\` or equivalent?" >&2
    exit 1
  fi

  gum "# fixing up built products"

  DEPS="$(deps.ts "$PKG")"  # needs to be runtime deps AND include self
  # shellcheck disable=SC2086
  DEPS=$(install.ts $DEPS)
  PATH="$d/share/brewkit:$PATH" fixup.ts "$PREFIX" --deps "$DEPS"

  find "$PREFIX" -type f -name \*.la -delete

  gum "# symlinking installations"

  link.ts "$PREFIX" "$PKG"

  if test -n "$GITHUB_ACTIONS"; then
    GH_PKGS="$GH_PKGS $PKG"
    GH_RELATIVE_PATHS="$GH_RELATIVE_PATHS ${PREFIX#"$TEA_PREFIX"/}"

    if test -f "$ZIP"; then
      GH_SRCS="$GH_SRCS ${ZIP#"$TEA_PREFIX"/}"
      GH_SRCS_RELATIVE_PATHS="$GH_SRCS_RELATIVE_PATHS ${ZIP#"$TEA_PREFIX"/}"
    else
      GH_SRCS="$GH_SRCS ~"
    fi
  fi
done

if test -n "$GITHUB_ACTIONS"; then
  {
    echo "pkgs=$GH_PKGS"
    echo "relative-paths=$GH_RELATIVE_PATHS"
    echo "srcs=$GH_SRCS"
    echo "srcs-relative-paths=$GH_SRCS_RELATIVE_PATHS"
  } >> "$GITHUB_OUTPUT"
fi
