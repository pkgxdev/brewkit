#!/usr/bin/env -S pkgx bash
# shellcheck shell=bash

set -eo pipefail

d="$(cd "$(dirname "$0")"/.. && pwd)"
PATH="$d/libexec:$PATH"

if test -z "$1"; then
  if test -z "$PKGX_PANTRY_PATH"; then
    echo "error: PKGX_PANTRY_PATH is not set" >&2
    exit 1
  fi
  for x in $(echo "$PKGX_PANTRY_PATH" | tr ':' '\n'); do
    if test -z "$PKGS" -a -d "$x"/.git; then
      #^^^^^^^^^^^^^^^ stop at first match
      PKGS="$(GIT_WORK_TREE="$x" peek.sh --print-paths)"
    fi
  done
else
  PKGS="$(_PATHS=1 find.ts $1)"
fi

if test -z "$EDITOR"; then
  if command -v code >/dev/null; then
    EDITOR="code"
  elif command -v vim >/dev/null; then
    EDITOR="vim"
  elif command -v vi >/dev/null; then
    EDITOR="vi"
  elif command -v emacs >/dev/null; then
    EDITOR="emacs"
  else
    echo "error: \`\$EDITOR\` is not set" >&2
    exit 1
  fi
elif test "$EDITOR" = code_wait; then
  # this is for mxcl who generally prefers his editor to wait
  # but not in this case. #perks-of-making-the-thing
  EDITOR="code"
fi

if test -z "$PKGS"; then
  echo "error: no new packages in \`\$PKGX_PANTRY_PATH\`" >&2
  exit 1
elif test "$EDITOR" = code; then
  # shellcheck disable=2086
  exec $EDITOR $PKGX_PANTRY_PATH $PKGS
  # ^^ be more useful
else
  # shellcheck disable=2086
  exec $EDITOR $PKGS
fi
